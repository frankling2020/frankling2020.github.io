<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yelp User Analysis</title>
      <link href="/2022/12/09/Yelp-User-Analysis/"/>
      <url>/2022/12/09/Yelp-User-Analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>With the rise of deep learning and machine learning, many retailers adopt recommendation systems to increase their competitive ability in the market. Yelp platform has published an extensive dataset about its user and business profiles (around 9 GB). Many researchers have explored the dataset, but few of them focus on friend recommendations with users. In this project, the k-hop sub-graph or the ego-net of one specific user will be analyzed to provide diverse recommendations</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>Due to the data size, we will focus on the sub-graph of the data obtained from the breadth-first search in PySpark and the following tasks:</p><ol><li>We will use the Jaccard similarity of the reviewed businesses to define the similarity of the users. It intends to find similar users through collaborative filtering.Since the data is large, we will implement the MinHash to approximate the Jaccard similarity.</li><li>The friend recommendation here is the link prediction task in the graph, so we will use the Adamic-Adar index as the baseline and GraphSage model to further improve it.</li><li>The previous recommendations are based on similarity, so we will also recommend the elite users to the users to increase the diversity of the recommendation. In this case, we use the<br>number of fans as the metrics and other information to predict the popularity of the user with ridge regression, random forest, and MLP.</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>Please see the report and code <a class="link"   href="https://github.com/frankling2020/UMSI-Projects/tree/main/si671prj" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h2><ol><li>Clean the dataset and extract useful information from the original data with a JSON file.</li><li>Prepare for the implementation of friend recommendations on the k-hop sub-graph (or egonet) extracted by breadth-first search (BFS).</li><li>Use MinHash to approximate the Jaccard Similarity of shops by users to define the user similarities.</li><li>Use the Adamic–Adar index to predict the user’s relationship(or links) as a baseline.</li><li>Adapt the GraphSage to predict links between users.</li><li>Regress the number of fans for each user by linear regression, random forest, and MLP with the criterion of R-Squared</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/yelp-flowchart.png"                      alt="img"                ></p><h2 id="Sample-User-Profile"><a href="#Sample-User-Profile" class="headerlink" title="Sample User Profile"></a>Sample User Profile</h2><p>To help reader gain a clearer impression for our work, we use a sample user and shows his statistics. His name is Gigi, whose user ID is 4476724 and has 327 friends on Yelp. 1184 of his comments are marked as funny comments, and 1567 of them are useful.</p><p>According to our methodology, he has a Jaccard similarity of 0.314 with one of his friends Mark, whose user ID is 5495693 and has 465 friends.3175 of his comments are marked as funny comments, and 5685 of them are useful.</p><p>Then, using our link prediction and regression methods, we would recommend Nick (5236527), Tim (2568097), and Sue (4978186) who also contribute lots of useful votes and owned friends but have fewer fans.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Data Mining </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luna Tennis Club</title>
      <link href="/2022/12/02/Luna-Tennis-Club/"/>
      <url>/2022/12/02/Luna-Tennis-Club/</url>
      
        <content type="html"><![CDATA[<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><pre class="language-none"><code class="language-none">Hello Database Team member,I am an instructor in a newly opened tennis club LUNA. Many students come to learn some basic tennis skills and desire to have personalized training. Professional tennis matches will be good examples for my students to understand them. So, could you help me by providing some practical suggestions to my students?The questions will cover basic information about the match, the court, and some tennis skills. Hope the tennis terms will not make it difficult for you to understand. It is fine to use the public data collected between 2018 and 2022.Basic Information1.Will age be a big concern to the tennis player? Please analyze whether the older player will be likely to lose the game as well as the age distribution of the winner and the loser. 2.How long will each game take on average for different tourney levels and surfaces (i.e., clay, grass, and hard)? The expected time will help my students to wisely allocate their physical energy.3.Is there a clear relationship between the surface and the number of aces and double faults in one game? Please analyze the average aces and double faults in each kind of surface.Tennis Skills4.Would you like to find the top 5 tennis players who finish the match faster with a winning rate over 0.8 in best-three-out-of-five matches? These players’ skills may be very valuable for my students.5.Some of my students feel panic when facing break points. Would you like to find the top 10 players who save the most break points they have faced and rank top 50 in 2022-09-12? Please order them by the descending order of the ratio of the break points saved to the break points faced, and then by the ascending order of average break points faced and player id.6.Some young students want to learn ace because it is so cool! Could you find the top 10 players who have the average ace but the lowest double faults in each match? And I hope these players have ranked in the top 100 once after June 2022.Tennis Player7.Novak Djokovic is my favorite tennis player. Are there any changes in him in recent years like the aces, double faults, or the duration of the match? Please separately analyze the game he won and didn’t win and the type of match (with 3 or 5 sets at maximum).8.Can you find all the matches between Roger Federer and Rafael Nadal between 2018 and 2022?Please provide all the queries and the answer. Hope it will not be so difficult. Thank you for helping me and my students in advance.Thanks,Andrew</code></pre><h2 id="Reply"><a href="#Reply" class="headerlink" title="Reply"></a>Reply</h2><p>It’s my great pleasure to help you and your students in tennis. Actually, I sometimes play tennis in my spare time. I am also curious about the questions you mention. I use the data from ATP players from 2018 to 2022 and obtain the following results.</p><h4 id="Basic-Information"><a href="#Basic-Information" class="headerlink" title="Basic Information"></a><strong>Basic Information</strong></h4><p><strong>1. Will age be a big concern to the tennis player? Please analyze whether the older player will be likely to lose the game as well as the age distribution of the winner and the loser.</strong><br>I first use the query to find the frequency of the match that the older wins the younger</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select avg(winner_age &gt; loser_age) as avg_old_win from matches;</code></pre><p>We can find that the frequency of the match where the older wins is roughly closer to 0.48. So, it is hard to say the age will significantly influence the results.<br>Plus, I also aggregate and get the following distribution</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select w.age, win_cnt, lose_cntfrom (select round(winner_age) as age, count(1) as win_cnt from matches group by round(winner_age)) wjoin (select round(loser_age) as age, count(1) as lose_cnt from matches group by round(loser_age)) lon w.age &#x3D; l.age order by w.age;</code></pre><p>So, we can find the distribution is almost similar.</p><p><strong>2. How long will each game take on average for different tourney levels and surfaces (i.e., clay, grass, and hard)?</strong><br>I use the following query</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select description, surface, avg_time from (select surface_id, tourney_level, avg(minutes &#x2F; (w_game + l_game)) as avg_time from matches mjoin tourney t on m.tourney_id &#x3D; t.id group by surface_id, tourney_level) ajoin surface s on a.surface_id &#x3D; s.idjoin level l on a.tourney_level &#x3D; l.idorder by description, surface;</code></pre><p>So, it is interesting to find that the average time per game is around 4.3 minutes. The average time in clay is the largest, while that in the grass is the shortest. Perhaps, it is because the bouncing speed of ball in the grass is fast, while the ball speed in the clay is slow. However, it is not clear that the tourney levels will affect the average time.</p><p><strong>3. Analyze the average aces and double faults in each kind of surface</strong><br>I use the query and obtain the following</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select  surface, avg(d1.ace + d2.ace) as avg_ace, avg(d1.df + d2.df) as avg_df from matches mjoin (select match_id, player_id, ace, df from match_details) d1 on m.id &#x3D; d1.match_id and m.winner_id &#x3D; d1.player_idjoin (select match_id, player_id, ace, df from match_details) d2 on m.id &#x3D; d2.match_id and m.loser_id &#x3D; d2.player_idjoin tourney t on m.tourney_id &#x3D; t.idjoin level l on t.tourney_level &#x3D; l.idjoin surface s on t.surface_id &#x3D; s.idgroup by surface;</code></pre><p>We can clearly find that there are less aces and double faults in clay. So, I may recommend the player good at serving not to play on the clay.</p><h4 id="Tennis-Skills"><a href="#Tennis-Skills" class="headerlink" title="Tennis Skills"></a><strong>Tennis Skills</strong></h4><p><strong>4. Would you like to find the top 5 tennis players who finish the match faster with a winning rate over 0.8 in best-three-out-of-five matches?</strong><br>I use the query and obtain the following</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select player_id, min(name_first) as firstname, min(name_last) as lastname, avg(minutes) as avg_min,    avg(IF(m.winner_id &#x3D; d.player_id, 1, 0)) as avg_win from match_details djoin  matches m on d.match_id &#x3D; m.idjoin players p on d.player_id &#x3D; p.idwhere best_of &#x3D; 5group by player_idhaving avg_win &gt; 0.8order by avg_min limit 5;</code></pre><p>I think the results meet the expectation. We find many famous players like Roger Federer, Novak Djokovic, and Rafael Nadal. Hope this results will help your students.</p><p><strong>5. Would you like to find the top 10 players who save the most break points they have faced and rank top 50 in 2022-09-12? Please order them by the descending order of the ratio of the break points saved to the break points faced, and then by the ascending order of average break points faced and player id.</strong><br>I use the query and find that</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select player_id, min(name_first) as firstname, min(name_last) as lastname,       avg(bpFaced) as avg_bpFaced, avg(bpSaved&#x2F;bpFaced) as avg_saveRate from (select player_id, bpFaced, bpSaved from match_details djoin (select id, winner_id from matches) m on d.match_id &#x3D; m.idwhere player_id in (select player_id from rankings where ranking_date &#x3D; &quot;2022-09-12&quot; and ranking &lt;&#x3D; 50)) as dmrjoin players p on dmr.player_id &#x3D; p.idgroup by player_idorder by avg_saveRate desc, avg_bpFaced, player_idlimit 10;</code></pre><p><strong>6. Could you find the top 10 players who have the average ace but the lowest double faults in each match? And I hope these players have ranked in the top 100 once after June 2022.</strong><br>I use the query and obtain that</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select player_id, min(name_first) as firstname, min(name_last) as lastname,       avg(ace) as avg_ace, avg(df) as avg_df from match_details djoin (select id, tourney_id from matches) m on m.id &#x3D; d.match_idjoin tourney t on t.id &#x3D; m.tourney_idjoin players p on d.player_id &#x3D; p.idwhere player_id in (select distinct player_id from rankingswhere year(ranking_date) &#x3D; 2022 and month(ranking_date) &gt;&#x3D; 6 and ranking &lt;&#x3D; 100)group by player_idorder by avg_ace desc, avg_dflimit 10;</code></pre><p>Interestingly, I find some names that have appeared in the previous question like John Isner, Reilly Opelka, and Nick Kyrgios. There may be some correlation between these statistics.</p><h4 id="Tennis-Player"><a href="#Tennis-Player" class="headerlink" title="Tennis Player"></a><strong>Tennis Player</strong></h4><p><strong>7. Are there any changes of Novak Djokovic in recent years like the aces, double faults, or the duration of the match? Please separately analyze the game he won and didn’t win and the type of match (with 3 or 5 sets at maximum).</strong><br>I use the following query and find that</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select year(m.tourney_date) as year, best_of, m.winner_id &#x3D; md.player_id as is_win,       count(*) as cnt, avg(ace) as avg_ace, avg(df) as avg_df, avg(minutes) as avg_min from matches mjoin (    select * from match_details    where player_id in (select id from players where name_first &#x3D; &quot;Novak&quot; and name_last &#x3D; &quot;Djokovic&quot;)) md on m.id &#x3D; md.match_idgroup by year, best_of, is_winorder by year, best_of, is_win;</code></pre><p><strong>8. Can you find all the matches between Roger Federer and Rafael Nadal between 2018 and 2022?</strong><br>I use the following query and obtain that</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select tourney_date, best_of, (m.winner_id &#x3D; d1.player_id) as RF_win,       (m.winner_id &#x3D; d2.player_id) as RN_win,       IF(m.winner_id &#x3D; d1.player_id, w_game, l_game) as RF_game,       IF(m.winner_id &#x3D; d2.player_id, w_game, l_game) as RN_game       from matches mjoin (select * from match_details    where player_id in (select id from players where name_first &#x3D; &quot;Roger&quot; and name_last &#x3D; &quot;Federer&quot;)) d1 on d1.match_id &#x3D; m.idjoin (select * from match_details    where player_id in (select id from players where name_first &#x3D; &quot;Rafael&quot; and name_last &#x3D; &quot;Nadal&quot;)) d2 on d2.match_id &#x3D; m.idorder by tourney_date;</code></pre><p>There are only two recorded matches in the dataset. Hope this is helpful to you.</p><p>Thank you for letting me do this project! I have learned a lot about tennis and SQL from this project. Thank you again for trusting me! Hope those results are useful for you and your students.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Contrastive Learning on Graph Representation</title>
      <link href="/2022/09/10/Contrastive-Learning-on-Graph-Representation/"/>
      <url>/2022/09/10/Contrastive-Learning-on-Graph-Representation/</url>
      
        <content type="html"><![CDATA[<h2 id="Contrastive-Learning-on-Graph-Representation"><a href="#Contrastive-Learning-on-Graph-Representation" class="headerlink" title="Contrastive Learning on Graph Representation"></a>Contrastive Learning on Graph Representation</h2><p>• Proposed random masking and attention mechanism in the graph augmentation.</p><p>• Surpassed baseline models in 5 out of 9 datasets by tuning the model in the ablation study.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/research.png"                      alt="img"                ></p><h2 id="Efforts"><a href="#Efforts" class="headerlink" title="Efforts"></a>Efforts</h2><ul><li><a class="link"   href="https://github.com/frankling2020/Self-learn-Repo/tree/main/GNN_PRP" >Weekly Reports <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://github.com/frankling2020/ADA-GCL" >ADA-GCL Code <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> GNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Music Recommendation with Spark</title>
      <link href="/2022/08/09/Music-Recommendation-with-Spark/"/>
      <url>/2022/08/09/Music-Recommendation-with-Spark/</url>
      
        <content type="html"><![CDATA[<h2 id="MSD-Million-Song-Dataset"><a href="#MSD-Million-Song-Dataset" class="headerlink" title="MSD (Million Song Dataset)"></a>MSD (Million Song Dataset)</h2><p>The Million Song Dataset is a freely-available collection of audio features and metadata for a million contemporary popular music tracks.</p><p>The core of the dataset is the feature analysis and metadata for one million songs, provided by The Echo Nest. The dataset does not include any audio, only the derived features.</p><h2 id="Data-Processing"><a href="#Data-Processing" class="headerlink" title="Data Processing"></a>Data Processing</h2><ol><li>Familiarize HDF5 and its related libraries</li><li>Use Apache Avro and Snappy Codec to compress data</li><li>Visualize dataset to gain an intuitive knowledge</li></ol><h2 id="Drill-and-SQL"><a href="#Drill-and-SQL" class="headerlink" title="Drill and SQL"></a>Drill and SQL</h2><ol><li>Range of dates covered by the songs</li><li>The hottest and shortest song with highest energy and lowest tempo</li><li>Album with the most tracks</li><li>Band that recorded the longest song</li></ol><h2 id="BFS-with-Spark"><a href="#BFS-with-Spark" class="headerlink" title="BFS with Spark"></a>BFS with Spark</h2><ol><li>Use k-hops to define the similarity</li><li>Relationship in the Graph (artist, song, similar_artists)</li><li>Input: Adjacency list (artist, similar_artists)</li><li>Output: similar artists within k-hop</li></ol><p><strong>Algorithm</strong></p><ol><li>Compared with bfs in mapreduce, Spark can implement mapper and reducer function with lambda function.</li><li>Mark the visited node and the most recently visited (MRV) node.</li><li>FromMRVnode to visit their neighbours in parallel</li><li>Mark those neighbours as MRV</li></ol><p><strong>Implementation</strong></p><ol><li>use the local variable to record MRV and broadcast to executors</li><li>use rdd to record how nodes are visited with each record (artist, distance).</li><li>For bfs part, v1 runs about 6 s, while v2 runs about 1 s with 2GB data.</li><li>However, when exporting the results to local files, v1 is much faster.</li></ol><h2 id="Diverse-Recommendation"><a href="#Diverse-Recommendation" class="headerlink" title="Diverse Recommendation"></a>Diverse Recommendation</h2><ol><li>Use the Page Rank to analyze the sub-graph around one artist</li><li>Page Rank is a link analysis algorithm measuring the relative importance within the set.</li><li>Markov chain model: a random walk model to detect the potential interests</li><li>Implement the graph visualization with networkX and show the potential<br>related artist to the user.</li></ol><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol><li>BFS in Spark is much faster than BFS in MapReduce</li><li>Spark takes full advantage of memory in BFS.</li><li>From the k-hop graph, we can generally get the relationship between similar<br>artists.</li><li>The system can recommend the songs from those similar artists to the user.</li></ol><p>More related experience with big data tools are shown in <a class="link"   href="https://github.com/frankling2020/Methods_and_Tools_for_Big_Data" >Methods_and_Tools_for_Big_Data <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tqdm<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> df<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> iters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span>    queue <span class="token operator">=</span> sc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    distance <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token builtin">iter</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> queue <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> queue<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                tmp <span class="token operator">-=</span> visited            visited <span class="token operator">|</span><span class="token operator">=</span> tmp            queue <span class="token operator">=</span> sc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            distance<span class="token punctuation">[</span><span class="token builtin">iter</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp      t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> distance<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>out<span class="token punctuation">)</span>      <span class="token keyword">return</span> t<span class="token keyword">def</span> <span class="token function">pbfs</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> iters<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      dist <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b <span class="token keyword">else</span> <span class="token number">2</span><span class="token operator">*</span>iters<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">iter</span> <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m1 <span class="token operator">=</span> df<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dist<span class="token punctuation">)</span>        m2 <span class="token operator">=</span> m1<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">iter</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">iter</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dist <span class="token operator">=</span> dist<span class="token punctuation">.</span>union<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> dist<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> iters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">)</span>    t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> res<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>out<span class="token punctuation">)</span>      <span class="token comment"># return df.join(dist).filter(lambda x: x[1][1] &lt;= iters)</span>    <span class="token keyword">return</span> t<span class="token keyword">def</span> <span class="token function">pagerank</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.85</span><span class="token punctuation">,</span> iters<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ranks <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b <span class="token keyword">else</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters<span class="token punctuation">)</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> df<span class="token punctuation">.</span>rightOuterJoin<span class="token punctuation">(</span>ranks<span class="token punctuation">)</span><span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        contr <span class="token operator">=</span> m<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cnt <span class="token operator">=</span> contr<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        ranks <span class="token operator">=</span> contr<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">/</span> cnt <span class="token operator">+</span> alpha <span class="token operator">*</span> x<span class="token punctuation">)</span>    m <span class="token operator">=</span> df<span class="token punctuation">.</span>rightOuterJoin<span class="token punctuation">(</span>ranks<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> m<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>out<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>out<span class="token punctuation">)</span><span class="token comment"># def floyd_spark(df, idx):</span><span class="token comment">#     def update(prev, edges, artist):</span><span class="token comment">#         if artist in prev.keys():</span><span class="token comment">#             for dst, cost in edges.items():</span><span class="token comment">#                 if dst in prev.keys():</span><span class="token comment">#                     prev[dst] = min(prev[dst], prev[artist] + cost)</span><span class="token comment">#                 else:</span><span class="token comment">#                     prev[dst] = prev[artist] + cost</span><span class="token comment">#         return prev</span><span class="token comment">#     m = df.rdd.map(lambda row: (row[idx], &#123;sim: 1 for sim in row[idx+1:]&#125;))</span><span class="token comment">#     artists = set(df.rdd.map(lambda row: row[idx]).collect())</span><span class="token comment">#     for iter, artist in enumerate(tqdm(artists)):</span><span class="token comment">#         edges = dict(m.filter(lambda x: x[0] == artist) \</span><span class="token comment">#                 .map(lambda x: list(x[1].items()))\</span><span class="token comment">#                 .reduce(lambda x,y: x + y))</span>            <span class="token comment">#         m = m.map(lambda row: (row[0], update(row[1], edges, artist))).cache()</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop Cluster</title>
      <link href="/2022/07/01/Hadoop-Cluster/"/>
      <url>/2022/07/01/Hadoop-Cluster/</url>
      
        <content type="html"><![CDATA[<p>It is a lab related to build hadoop cluster with Spark, Drill, and Zookeeper. I implement it with docker-compose. It is published in <a class="link"   href="https://hub.docker.com/r/frankling2021/shadrik" >frankling2021&#x2F;shadrik <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. It aims at studying the basics of big data. People can dive into it to explore more things.</p><ul><li>Jump into the <code>conf</code> directory to fit into your setting</li><li>Jump into <code>/etc/profile.d/shadrik.sh</code> to edit the environment variables</li><li>Jump into <code>/root/config/README.md</code> to see some useful commands</li></ul><p>You can see some related code <a class="link"   href="https://github.com/frankling2020/Some-Projects-Labs/tree/main/franklling2021-bjava" >Some-Projects-Labs&#x2F;franklling2021-bjava <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>housing-price</title>
      <link href="/2021/12/01/housing-price/"/>
      <url>/2021/12/01/housing-price/</url>
      
        <content type="html"><![CDATA[<h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><p>The dataset comes from the Cook County Assessor’s Office (CCAO) in Illinois, a government institution that determines property taxes across most of Chicago’s metropolitan area and its nearby suburbs. In the United States, all property owners are required to pay property taxes, which are then used to fund public services including education, road maintenance, and sanitation. These property tax assessments are based on property values estimated using statistical models that consider multiple factors, such as real estate value and construction cost.</p><p>The CCAO dataset consists of over 500 thousand records describing houses sold in Cook County in recent years (new records are still coming in every week!). The data set we will be working with has 61 features in total. An explanation of each variable can be found in the included <code>codebook.txt</code> file. Some of the columns have been filtered out to ensure this assignment doesn’t become overly long when dealing with data cleaning and formatting.</p><p>The data are split into training and test sets with 204792 and 68264 observations, respectively.</p><h2 id="Part-1-Explortary-Data-Analysis-EDA"><a href="#Part-1-Explortary-Data-Analysis-EDA" class="headerlink" title="Part 1: Explortary Data Analysis (EDA)"></a>Part 1: Explortary Data Analysis (EDA)</h2><ul><li>Abnormal Values: remove outliers, fill with default values</li><li>Feature Engineering: log transformation, one-hot encoding, keyword extraction</li><li>Modeling: linear regression</li><li>Notice: implement with pipeline and visualization</li></ul><p>Please see the code <a class="link"   href="https://github.com/frankling2020/UMSI-Projects/blob/main/ece4710j/Project_part1.ipynb" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="Part-2-Advanced-Prediction-with-Machine-Learning"><a href="#Part-2-Advanced-Prediction-with-Machine-Learning" class="headerlink" title="Part 2: Advanced Prediction with Machine Learning"></a>Part 2: Advanced Prediction with Machine Learning</h2><ul><li>Criterion: L2 loss</li><li>Baseline: ridge regression</li><li>Main Model: xgboost + random forest</li><li>Ablation study: xgboost, xgboost + ridge regression</li></ul><p>Please see the code <a class="link"   href="https://github.com/frankling2020/UMSI-Projects/blob/main/ece4710j/Project_part2.ipynb" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Data Science </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
